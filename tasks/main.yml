---
# tasks file for docker-jenkins
# https://github.com/jenkinsci/docker#official-jenkins-docker-image

- name: create the data directories
  become: yes
  file:
    path: "{{ docker_jenkins_root_data_dir }}/{{ item }}"
    state: directory
    mode: 0700
    owner: root
    group: root
    recurse: yes
  with_items:
    - nginx/conf.d
    - nginx/ssl/jenkins
  notify: "restart nginx"

- name: create the jenkins data directory
  become: yes
  file:
    path: "{{ docker_jenkins_root_data_dir }}/{{ item }}"
    state: directory
    mode: 0755
    owner: service
    group: service
  with_items:
    - jenkins_docker/certs
    - jenkins_home
    - jenkins_home/casc_configs
  notify: "restart nginx"

- name: copy the jenkins.yaml config
  # https://github.com/jenkinsci/configuration-as-code-plugin
  become: yes
  template:
    src: "{{ docker_jenkins_casc_path }}"
    dest: "{{ docker_jenkins_root_data_dir }}/jenkins_home/casc_configs/jenkins.yaml"
    mode: 0740
    owner: service
    group: service
  notify: "restart jenkins"

- name: copy the nginx conf
  # https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy
  become: yes
  template:
    src: jenkins.conf.j2
    dest: "{{ docker_jenkins_root_data_dir }}/nginx/conf.d/jenkins.conf"
    mode: 0400
    owner: root
    group: root
  notify: "restart nginx"

- name: copy the key
  become: yes
  copy:
    src: "files/{{ docker_jenkins_dns }}.key"
    dest: "{{ docker_jenkins_root_data_dir }}/nginx/ssl/jenkins/{{ docker_jenkins_dns }}.key"

- name: own the key
  become: yes
  file:
    path: "{{ docker_jenkins_root_data_dir }}/nginx/ssl/jenkins/{{ docker_jenkins_dns }}.key"
    state: file
    group: root
    owner: root
    mode: 0400

- name: copy the pem
  become: yes
  copy:
    src: "files/{{ docker_jenkins_dns }}.pem"
    dest: "{{ docker_jenkins_root_data_dir }}/nginx/ssl/jenkins/{{ docker_jenkins_dns }}.pem"

- name: own the pem
  become: yes
  file:
    path: "{{ docker_jenkins_root_data_dir }}/nginx/ssl/jenkins/{{ docker_jenkins_dns }}.pem"
    state: file
    group: root
    owner: root
    mode: 0400

- name: pull the jenkins docker image
  become: true
  docker_image:
    name: "jenkins/jenkins:{{ docker_jenkins_version_jenkins }}"
    source: pull
  notify: "restart nginx"

- name: copy the jenkins dockerfile
  become: yes
  template:
    src: "templates/Dockerfile"
    dest: "{{ docker_jenkins_root_data_dir }}/jenkins_docker/Dockerfile"
    mode: 0700
    owner: root
    group: root

- name: copy plugins.txt
  become: yes
  copy:
    src: "{{ docker_jenkins_plugins }}"
    dest: "{{ docker_jenkins_root_data_dir }}/jenkins_docker/plugins.txt"
    mode: 0744
    owner: service
    group: service
  register: copy_plugins

- name: copy custom certificates to trust
  become: yes
  copy:
    src: "{{ item.path }}"
    dest: "{{ docker_jenkins_root_data_dir }}/jenkins_docker/certs/"
    remote_src: "{{ item.remote_src }}"
    mode: 0744
    owner: service
    group: service
  loop: "{{ docker_jenkins_certs_to_trust }}"
  when: docker_jenkins_certs_to_trust is defined

- name: build the jenkins image (normal)
  become: yes
  docker_image:
    build:
      path: "{{ docker_jenkins_root_data_dir }}/jenkins_docker"
      pull: yes
    name: jenkins/jenkins-custom
    tag: "{{ docker_jenkins_version_jenkins }}"
    source: build
  when: not copy_plugins.changed

- name: build the jenkins image (force)
  become: yes
  docker_image:
    build:
      path: "{{ docker_jenkins_root_data_dir }}/jenkins_docker"
      pull: yes
    source: build
    force_source: yes
    name: jenkins/jenkins-custom
    tag: "{{ docker_jenkins_version_jenkins }}"
  when: copy_plugins.changed

- name: pull the nginx docker image
  become: yes
  docker_image:
    name: nginx:{{ docker_jenkins_version_nginx }}
    source: pull

- name: bring up the docker instances for jenkins and nginx
  become: yes
  docker_compose:
    project_name: jenkins
    build: yes
    definition:
      version: '2'
      services:
        jenkins:
          image: jenkins/jenkins-custom:{{ docker_jenkins_version_jenkins }}
          container_name: jenkins
          ports:
           - 8080:8080
           # https://github.com/jenkinsci/docker/blob/master/README.md#attaching-build-executors
           - "{{ docker_jenkins_slave_port }}:{{ docker_jenkins_slave_port }}"
           # Emails
           - 25:25
          volumes:
           - "{{ docker_jenkins_root_data_dir }}/jenkins_home:/var/jenkins_home"
          mem_limit: 8g
          environment:
           # Once we switched to Java 11, we started running out of memory. Gonna limit it to 8 GB of RAM.
           - "JAVA_OPTS=-Djava.util.logging.config.file=/var/jenkins_home/log.properties -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true -Dhudson.footerURL={{ docker_jenkins_footer_url }} -Dhudson.plugins.active_directory.ActiveDirectorySecurityRealm.forceLdaps=true"
           # - JENKINS_OPTS=" --handlerCountMax=300"    # This gives Jenkins a bit more breathing room in case there are many simultaneous connections.
           - TZ={{ docker_jenkins_timezone }}
           - CASC_JENKINS_CONFIG=/var/jenkins_home/casc_configs/jenkins.yaml
          restart: always
        nginx:
          image: nginx:{{ docker_jenkins_version_nginx }}
          container_name: nginx
          ports:
           - 80:80
           - 443:443
          depends_on:
           - jenkins
          links:
           - jenkins
          volumes:
           - "{{ docker_jenkins_root_data_dir }}/nginx/conf.d/jenkins.conf:/etc/nginx/conf.d/jenkins.conf"
           - "{{ docker_jenkins_root_data_dir }}/nginx/ssl:/etc/ssl"
          restart: always
  register: docker_compose_output